const express = require('express');
const mongoose = require('mongoose');

// Environment variable (e.g., from Docker Compose)

//const mongoUrl = process.env.MONGO_URL || 'mongodb://13.219.82.40:27017/mydb';

const mongoUrl = process.env.MONGO_URL || 'mongodb://mongo:27017/mydb';


const app = express();
const port = 3000;

// Connect to MongoDB
mongoose.connect(mongoUrl, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('✅ Connected to MongoDB'))
.catch((err) => {
  console.error('❌ MongoDB connection error:', err);
  process.exit(1);
});

// Middleware to parse JSON
app.use(express.json());

// Define a User model
const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  }
});

const User = mongoose.model('User', userSchema);

// GET /health
app.get('/health', (req, res) => {
  res.send('OK');
});

// POST /user
app.post('/user', async (req, res) => {
  const { name, email } = req.body;

  if (!name || !email) {
    return res.status(400).json({ error: 'Name and email are required.' });
  }

  try {
    const newUser = new User({ name, email });
    await newUser.save();

    return res.status(201).json({
      message: 'User created successfully',
      user: newUser
    });
  } catch (err) {
    if (err.code === 11000) {
      return res.status(409).json({ error: 'Email already exists.' });
    }
    return res.status(500).json({ error: 'Failed to save user.' });
  }
});


// GET /users - Fetch all users from the database
app.get('/users', async (req, res) => {
  try {
    // Retrieve all users from the database
    const users = await User.find();

    // If no users are found, return an empty array
    if (users.length === 0) {
      return res.status(404).json({ message: 'No users found.' });
    }

    // Send the list of users
    return res.status(200).json({
      message: 'Users retrieved successfully',
      users: users
    });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: 'Failed to retrieve users.' });
  }
});


// Start server
app.listen(port, () => {
  console.log(`🚀 Server running on http://localhost:${port}`);
});

